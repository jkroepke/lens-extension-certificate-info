name: Integration tests

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - "*"
  workflow_dispatch: {}

permissions:
  contents: read

env:
  minikube_version: 1.36.0 # datasource=github-releases depName=kubernetes/minikube

jobs:
  test-integration:
    name: "integration tests on ${{ matrix.os }} update ${{ matrix.update }}"

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            arch: x64
            update: false
          - os: ubuntu-22.04
            arch: x64
            update: true

    runs-on: ${{ matrix.os }}
    timeout-minutes: 60

    env:
      ELECTRON_CACHE: ${{ github.workspace }}/.cache/electron
      ELECTRON_BUILDER_CACHE: ${{ github.workspace }}/.cache/electron-builder
      PLAYWRIGHT_BROWSERS_PATH: ${{ github.workspace }}/.cache/playwright

    steps:
      - name: Checkout plugin
        uses: actions/checkout@v4

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Disable pre post scripts for pnpm
        shell: bash
        run: pnpm config set enablePrePostScripts false

      - name: Get pnpm cache directory
        shell: bash
        run: echo "pnpm_cache_dir=$(pnpm store path)" >> ${GITHUB_ENV}

      - name: Use pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.pnpm_cache_dir }}
          key: ${{ matrix.os }}-${{ matrix.arch }}-node-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ matrix.os }}-${{ matrix.arch }}-node-

      - name: Install pnpm dependencies for extension
        id: install-pnpm-extension
        shell: bash
        run: timeout 300 pnpm install --color=always --prefer-offline --frozen-lockfile
        continue-on-error: true

      - name: Install pnpm dependencies for extension (retry)
        if: steps.install-pnpm-extension.outcome == 'failure'
        shell: bash
        run: timeout 300 pnpm install --color=always --prefer-offline --frozen-lockfile

      - name: Update pnpm dependencies for extension
        id: update-pnpm-extension
        if: matrix.update == true
        shell: bash
        run: timeout 300 pnpm update @freelensapp/extensions --color=always --prefer-offline
        continue-on-error: true

      - name: Update pnpm dependencies for extension (retry)
        if: matrix.update == true && steps.update-pnpm-extension.outcome == 'failure'
        shell: bash
        run: timeout 300 pnpm update @freelensapp/extensions --color=always --prefer-offline

      - name: Get Freelens version
        shell: bash
        run: |
          freelens_version=$(pnpm list @freelensapp/extensions --json | jq -r '.[0].devDependencies["@freelensapp/extensions"].version')
          case "$freelens_version" in
            [0-9]*) echo "freelens_version=${freelens_version}" >> ${GITHUB_ENV};;
            *) exit 1
          esac

      - name: Build plugin
        run: pnpm build

      - name: Pack plugin
        run: pnpm pack

      - name: Get extension path
        shell: bash
        run: echo "EXTENSION_PATH=$(find $(pwd) -name '*.tgz')" >> ${GITHUB_ENV}

      - name: Checkout app
        uses: actions/checkout@v4
        with:
          repository: freelensapp/freelens
          ref: v${{ env.freelens_version }}
          path: freelens

      - name: Move app to upper directory
        shell: bash
        run: mv freelens ..

      - name: Get Electron version
        shell: bash
        run: echo "electron_version=$(yq -r .importers.freelens.devDependencies.electron.version ../freelens/pnpm-lock.yaml
          | sed 's/(.*)//')" >> $GITHUB_ENV

      - name: Get Electron Builder version
        shell: bash
        run: echo "electron_builder_version=$(yq -r .importers.freelens.devDependencies.electron-builder.version ../freelens/pnpm-lock.yaml
          | sed 's/(.*)//')" >> $GITHUB_ENV

      - name: Get Playwright version
        shell: bash
        run: echo "playwright_version=$(yq -r .importers.freelens.devDependencies.playwright.version ../freelens/pnpm-lock.yaml
          | sed 's/(.*)//')" >> $GITHUB_ENV

      - name: Use Electron cache
        uses: actions/cache@v4
        with:
          path: ${{ env.ELECTRON_CACHE }}
          key: ${{ matrix.os }}-${{ matrix.arch }}-electron-${{ env.electron_version }}
          restore-keys: |
            ${{ matrix.os }}-${{ matrix.arch }}-electron-

      - name: Use Electron Builder cache
        uses: actions/cache@v4
        with:
          path: ${{ env.ELECTRON_BUILDER_CACHE }}
          key: ${{ matrix.os }}-${{ matrix.arch }}-electron-builder-${{ env.electron_builder_version }}
          restore-keys: |
            ${{ matrix.os }}-${{ matrix.arch }}-electron-builder-

      - name: Use Playwright cache
        id: playwright-cache
        uses: actions/cache@v4
        with:
          path: ${{ env.PLAYWRIGHT_BROWSERS_PATH }}
          key: ${{ matrix.os }}-${{ matrix.arch }}-playwright-${{ env.playwright_version }}
          restore-keys: |
            ${{ matrix.os }}-${{ matrix.arch }}-playwright-

      - name: Install pnpm dependencies for app
        id: install-pnpm-app
        shell: bash
        run: cd ../freelens && timeout 300 pnpm install --color=always --prefer-offline --frozen-lockfile
        env:
          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: "1"
        continue-on-error: true

      - name: Install pnpm dependencies for app (retry)
        if: steps.install-pnpm-app.outcome == 'failure'
        shell: bash
        run: cd ../freelens && timeout 300 pnpm install --color=always --prefer-offline --frozen-lockfile
        env:
          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: "1"

      - name: Install Playwright with dependencies
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: cd ../freelens && pnpx playwright install --with-deps

      - name: Install Playwright's dependencies
        if: steps.playwright-cache.outputs.cache-hit == 'true'
        run: cd ../freelens && pnpx playwright install-deps

      - name: Build app
        run: cd ../freelens && pnpm --color=always --stream build

      - name: Copy tests from plugin to app
        run: |
          rm -f ../freelens/freelens/integration/__tests__/*
          cp integration/__tests__/* ../freelens/freelens/integration/__tests__

      - name: Get Kubernetes version
        run: echo "kubernetes_version=$(yq -r .config.bundledKubectlVersion ../freelens/freelens/package.json)" >> $GITHUB_ENV

      - name: Install minikube
        uses: manusa/actions-setup-minikube@v2.14.0
        with:
          minikube version: v${{ env.minikube_version }}
          kubernetes version: v${{ env.kubernetes_version }}
          github token: ${{ secrets.GITHUB_TOKEN }}
          driver: docker

      - name: Build extra resources
        id: build-resources
        run: cd ../freelens && pnpm --color=always build:resources
        continue-on-error: true

      - name: Build extra resources (retry)
        id: build-resources-2
        if: steps.build-resources.outcome == 'failure'
        run: cd ../freelens && pnpm --color=always build:resources
        continue-on-error: true

      - name: Build extra resources (retry 2)
        if: steps.build-resources-2.outcome == 'failure'
        run: cd ../freelens && pnpm --color=always build:resources

      - name: Build Electron app
        run: cd ../freelens && pnpm --color=always build:app dir --${{ matrix.arch }}

      - name: Run integration tests
        id: integration-tests-linux
        run: |
          cd ../freelens
          sudo chown root:root freelens/dist/linux-unpacked/chrome-sandbox
          sudo chmod 4755 freelens/dist/linux-unpacked/chrome-sandbox
          timeout 600 xvfb-run -a pnpm --color=always test:integration
        env:
          DEBUG: pw:browser
        continue-on-error: true

      - name: Run integration tests (retry)
        if: steps.integration-tests-linux.outcome == 'failure'
        run: |
          cd ../freelens
          sudo chown root:root freelens/dist/linux-unpacked/chrome-sandbox
          sudo chmod 4755 freelens/dist/linux-unpacked/chrome-sandbox
          timeout 600 xvfb-run -a pnpm --color=always test:integration
        env:
          DEBUG: pw:browser
